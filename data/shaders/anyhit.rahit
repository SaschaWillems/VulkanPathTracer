#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_scalar_block_layout : enable

#include "includes/random.glsl"
#include "includes/material.glsl"
#include "includes/ubo.glsl"
#include "includes/geometryTypes.glsl"

hitAttributeEXT vec3 attribs;

struct ObjBuffers
{
	uint64_t vertices;
	uint64_t indices;
	uint64_t materials;
};

layout(binding = 3, set = 0) uniform UniformData { Ubo ubo; };
layout(binding = 4, set = 0) buffer _scene_desc { ObjBuffers i[]; } scene_desc;
layout(binding = 5, set = 0) uniform sampler2D[] textures;

layout(buffer_reference, scalar) buffer Vertices {vec4 v[]; }; // Positions of an object
layout(buffer_reference, scalar) buffer Indices {uint i[]; }; // Triangle indices
layout(buffer_reference, scalar) buffer Materials {Material m[]; }; // Array of all materials on an object

#include "includes/geometry.glsl"

// The any hit shader is used for alpha masked textures

void main()
{
	Triangle tri = unpackTriangle(gl_PrimitiveID, ubo.vertexSize);
	ObjBuffers objResource = scene_desc.i[gl_InstanceCustomIndexEXT];
	Materials materials = Materials(objResource.materials);
	Material mat = materials.m[tri.materialIndex];
	// Ignore intersections for alpha masked hits
	if (mat.baseColorTextureIndex > -1) {
		vec4 color = texture(textures[mat.baseColorTextureIndex], tri.uv);
		if (color.a < 0.9) {
			ignoreIntersectionEXT;
		}
	}
}